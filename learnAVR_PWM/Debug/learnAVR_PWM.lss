
learnAVR_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000539  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c6  00000000  00000000  00000701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000244  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ae  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	3e c0       	rjmp	.+124    	; 0x90 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	3a c0       	rjmp	.+116    	; 0xba <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:

 static uint8_t val;
 
int main()
{
	DDRB |= (1<< PB0); // pin output PWM
  48:	b8 9a       	sbi	0x17, 0	; 23
	TCCR0 |= (1<<CS01)  ; // prescaler Timer 0
  4a:	83 b7       	in	r24, 0x33	; 51
  4c:	82 60       	ori	r24, 0x02	; 2
  4e:	83 bf       	out	0x33, r24	; 51
	TCNT0 =0;
  50:	12 be       	out	0x32, r1	; 50
	TIMSK = 1<<TOIE0; // interrupt timer0
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	89 bf       	out	0x39, r24	; 57

	sei();
  56:	78 94       	sei
	
	DDRD |= 1<<PD6;  //output for DIR
  58:	8e 9a       	sbi	0x11, 6	; 17
	DDRB |= 1<<PB1;    //output for ENABLE pin
  5a:	b9 9a       	sbi	0x17, 1	; 23
	
    DDRD &= ~(1<<PD1); //PD1 is Input
  5c:	89 98       	cbi	0x11, 1	; 17
	DDRD &= ~(1<<PD2); //PD2 is Input
  5e:	8a 98       	cbi	0x11, 2	; 17
	else if (PIND & (1<<PIND2)) //If switch is pressed
	{
	 
	 PORTB |= (1<<PB1);  // DIR =1
	 PORTD |= (1<<PD6);  // EN ON 
	 val =100;
  60:	94 e6       	ldi	r25, 0x64	; 100
	DDRD &= ~(1<<PD2); //PD2 is Input
	
while(1) //infinite loop
{
	
	if(PIND & (1<<PIND1)) //If switch is pressed
  62:	81 9b       	sbis	0x10, 1	; 16
  64:	05 c0       	rjmp	.+10     	; 0x70 <main+0x28>
	{
		PORTB &=~ (1<<PB1);    //Turns EN ON
  66:	c1 98       	cbi	0x18, 1	; 24
		PORTD |= (1<<PD6); // DIR =0
  68:	96 9a       	sbi	0x12, 6	; 18
		val =100;
  6a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  6e:	f9 cf       	rjmp	.-14     	; 0x62 <main+0x1a>
	}
	else if (PIND & (1<<PIND2)) //If switch is pressed
  70:	82 9b       	sbis	0x10, 2	; 16
  72:	05 c0       	rjmp	.+10     	; 0x7e <main+0x36>
	{
	 
	 PORTB |= (1<<PB1);  // DIR =1
  74:	c1 9a       	sbi	0x18, 1	; 24
	 PORTD |= (1<<PD6);  // EN ON 
  76:	96 9a       	sbi	0x12, 6	; 18
	 val =100;
  78:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  7c:	f2 cf       	rjmp	.-28     	; 0x62 <main+0x1a>
	}
	else
	{
			PORTB &=~ 1<<PB1;    //Turns OFF Enable
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	8c 7f       	andi	r24, 0xFC	; 252
  82:	88 bb       	out	0x18, r24	; 24
			PORTD &=~ 1<<PD6;    // 
  84:	82 b3       	in	r24, 0x12	; 18
  86:	80 78       	andi	r24, 0x80	; 128
  88:	82 bb       	out	0x12, r24	; 18
			val =0;			
  8a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  8e:	e9 cf       	rjmp	.-46     	; 0x62 <main+0x1a>

00000090 <__vector_9>:
	return 0;
}


// generate PWM 50%
ISR (TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	
	TCNT0 = val;
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a2:	82 bf       	out	0x32, r24	; 50
	PORTB ^= (1<<0);
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	89 27       	eor	r24, r25
  aa:	88 bb       	out	0x18, r24	; 24
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
